// This is your Prisma schema file.
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String    @unique
  password      String
  role          Role      @default(CUSTOMER)
  addresses     Address[]
  orders        Order[]
  reviews       Review[]
  cart          Cart?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Address {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  street       String
  city         String
  state        String
  postalCode   String
  country      String
  isDefault    Boolean @default(false)
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String  @db.ObjectId
}

model Product {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String
  price        Float
  images       String[]
  category     Category     @relation(fields: [categoryId], references: [id])
  categoryId   String       @db.ObjectId
  stock        Int
  variants     Variant[]
  reviews      Review[]
  cartItems    CartItem[]
  orderItems   OrderItem[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String    @unique
  description String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Variant {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  value       String
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   String  @db.ObjectId
}

model Cart {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String     @unique @db.ObjectId
  items     CartItem[]
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  cart        Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId      String  @db.ObjectId
  product     Product @relation(fields: [productId], references: [id])
  productId   String  @db.ObjectId
  quantity    Int
  price       Float
}

model Order {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  user          User        @relation(fields: [userId], references: [id])
  userId        String      @db.ObjectId
  items         OrderItem[]
  totalAmount   Float
  status        OrderStatus @default(PENDING)
  shippingAddress String
  paymentMethod   String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model OrderItem {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  order       Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId     String  @db.ObjectId
  product     Product @relation(fields: [productId], references: [id])
  productId   String  @db.ObjectId
  quantity    Int
  price       Float
}

model Review {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  rating      Int
  comment     String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String   @db.ObjectId
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   String   @db.ObjectId
  createdAt   DateTime @default(now())
}

enum Role {
  ADMIN
  CUSTOMER
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}